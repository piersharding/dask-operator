image: golang:1.12.5

include:
  - template: SAST.gitlab-ci.yml

variables:
  REPO_NAME: gitlab.com/piersharding/dask-operator
  SAST_GOSEC_LEVEL: 2

# the default GOPATH being /go, then you'd need to have your
# repository in /go/src/gitlab.com/piersharding/dask-operator
# Thus, making a symbolic link corrects this.
before_script:
  - |
    echo "Starting directory is: $(pwd)"
  - export GOPATH=${CI_PROJECT_DIR}/.cache
  - env
  - mkdir -p $GOPATH/src/$(dirname $REPO_NAME)
  - ln -svf $CI_PROJECT_DIR $GOPATH/src/$REPO_NAME
  - cd $GOPATH/src/$REPO_NAME
  - |
    echo "##### CI_PROJECT_DIR #####"
  - ls -latr ${CI_PROJECT_DIR}

stages:
  - check
  - build
  - test
  - image
  - push
  - badges
  - pages

.build_env: &buid_env
  before_script:
    - |
      echo "Starting directory (buid_env) is: $(pwd)"
      export GOPATH=${CI_PROJECT_DIR}/.cache
      export GO111MODULE=on
    - env

fmt:
  <<: *buid_env
  stage: check
  script:
    - make fmt

vet:
  <<: *buid_env
  stage: check
  script:
    - make vet

compile:
  <<: *buid_env
  stage: build
  script:
    - make manager
    # - go build -race -ldflags "-extldflags '-static'" -o $CI_PROJECT_DIR/mybinary
  artifacts:
    paths:
      - bin/manager
    expire_in: 1 weeks

test:
  <<: *buid_env
  stage: test
  script:
    - curl -L https://github.com/kubernetes-sigs/kubebuilder/releases/download/v2.2.0/kubebuilder_2.2.0_linux_amd64.tar.gz >/tmp/kubebuilder.tar.gz
    - tar -zxvf /tmp/kubebuilder.tar.gz
    - test -d /usr/local/kubebuilder || mv kubebuilder_2.2.0_linux_amd64 /usr/local/kubebuilder
    - export PATH=$PATH:/usr/local/kubebuilder/bin
    - make test
  artifacts:
    paths:
      - cover
    expire_in: 4 weeks

build-image:
  stage: image
  # Official docker image.
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo -n "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
    # - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - export IMG="$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA" # was "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --pull --cache-from $CI_REGISTRY_IMAGE:latest --tag "$IMG" .
    - docker push "$IMG"
    - docker tag "$IMG" "$CI_REGISTRY_IMAGE:latest"
    - docker push "$CI_REGISTRY_IMAGE:latest"
    - echo "$CI_COMMIT_SHORT_SHA (latest)" > current_tag.txt
  artifacts:
    paths:
        - current_tag.txt
  only:
    refs:
      - master

tag-push-latest:
  stage: push
  # Official docker image.
  image: docker:latest
  variables:
    # We do not need GitLab to clone the source code.
    GIT_STRATEGY: none  
  services:
    - docker:dind
  before_script:
    - echo -n "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
    - export IMG="$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA" # was "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
    - docker pull "$IMG"
    - docker tag "$IMG" "$CI_REGISTRY_IMAGE:latest"
    - docker push "$CI_REGISTRY_IMAGE:latest"
  # when: manual
  only:
    refs:
      - master

push-tag:
  stage: push
  variables:
    GIT_STRATEGY: none
  only:
    # We want this job to be run on tags only.
    - tags
  services:
    - docker:dind
  before_script:
    - echo -n "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
    - export IMG="$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA"
    - export TAGIMG="$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME"
    - docker pull $IMG
    - docker tag $IMG $TAGIMG
    - docker push $TAGIMG

badges:
  stage: badges
  image: python:3
  variables:
    GIT_STRATEGY: none
  tags:
    - docker
  script:
    - echo "Python other dependencies installation"
  after_script:
    - ls -latr
    - pip install anybadge
    - commits=$(git rev-list --all --count)
    - anybadge -l commits -v $commits -f commits.svg -c green
    - coverage=$(cat cover/total.txt)
    - anybadge --value=$coverage --file=coverage.svg coverage
    - current_tag=$(cat current_tag.txt)
    - anybadge --value="$current_tag" --label ImageTag --file=current_tag.svg --color=teal
  artifacts:
    paths:
      - commits.svg
      - coverage.svg
      - current_tag.svg
    when: on_success
    expire_in: 30 days
  dependencies:
    - test
    - build-image
  only:
    refs:
      - master

pages:
  stage: pages
  image: busybox:latest
  variables:
    GIT_STRATEGY: none
  script:
    - echo "No other dependencies installation"
  after_script:
   - ls -la
   - mkdir .public
   - cp cover/cover.html .public
   - cp -r commits.svg coverage.svg current_tag.svg .public
   - mv .public public
  only:
    refs:
      - master
  artifacts:
    paths:
      - public
    expire_in: 52 weeks
  dependencies:
    - badges
  tags:
    - docker
