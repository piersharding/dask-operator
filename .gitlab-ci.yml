image: golang:1.13.8

include:
  - template: License-Scanning.gitlab-ci.yml
  - template: Container-Scanning.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml
  - template: Security/License-Scanning.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml
  # - template: Security/DAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml

# custom selection of sast steps from:
# https://gitlab.com/gitlab-org/gitlab-foss/-/blob/12-8-stable/lib/gitlab/ci/templates/Security/SAST.gitlab-ci.yml
variables:
  # REPO_NAME: gitlab.com/piersharding/dask-operator
  # SP_VERSION: 2
  # SAST_DEFAULT_ANALYZERS: "bandit, brakeman, gosec, spotbugs, flawfinder, phpcs-security-audit, security-code-scan, nodejs-scan, eslint, sobelow, pmd-apex, kubesec, mobsf"
  SAST_DEFAULT_ANALYZERS: "bandit, gosec, eslint, kubesec"
  SAST_EXCLUDED_PATHS: "spec, test, tests, tmp, _tmp, .vscode, cover, hack"
  SAST_ANALYZER_IMAGE_TAG: 2
  SCAN_KUBERNETES_MANIFESTS: "true"
  SAST_DISABLE_DIND: "true"
  SAST_BRAKEMAN_LEVEL: 1
  SECURE_LOG_LEVEL: error


# the default GOPATH being /go, then you'd need to have your
# repository in /go/src/gitlab.com/piersharding/dask-operator
# Thus, making a symbolic link corrects this.
before_script:
  - |
    echo "Starting directory is: $(pwd)"
  - export GOPATH=${CI_PROJECT_DIR}/.cache
  - env
  - mkdir -p $GOPATH/src/$(dirname $REPO_NAME)
  - ln -svf $CI_PROJECT_DIR $GOPATH/src/$REPO_NAME
  - cd $GOPATH/src/$REPO_NAME
  - |
    echo "##### CI_PROJECT_DIR #####"
  - ls -latr ${CI_PROJECT_DIR}

stages:
  - check
  - compile
  - build
  - test
  - push
  # - dast
  - badges
  - pages

# sast:
#   stage: test
#   allow_failure: true
#   artifacts:
#     reports:
#       sast: gl-sast-report.json
#   only:
#     refs:
#       - branches
#     variables:
#       - $GITLAB_FEATURES =~ /\bsast\b/
#   image: docker:stable
#   variables:
#     DOCKER_DRIVER: overlay2
#     DOCKER_TLS_CERTDIR: ""
#     SAST_ANALYZER_IMAGE_PREFIX: "registry.gitlab.com/gitlab-org/security-products/analyzers"
#     # # dropped unwanted analyzers
#     # # SAST_DEFAULT_ANALYZERS: "bandit, brakeman, gosec, spotbugs, flawfinder, phpcs-security-audit, security-code-scan, nodejs-scan, eslint, tslint, secrets, sobelow, pmd-apex, kubesec"
#     SAST_DEFAULT_ANALYZERS: "gosec, spotbugs, flawfinder, security-code-scan, secrets"
#     SAST_ANALYZER_IMAGE_TAG: 2
#     SAST_CONFIDENCE_LEVEL: 3
#     SCAN_KUBERNETES_MANIFESTS: "false"
#     SAST_DISABLE_DIND: "false"
#   services:
#     - docker:stable-dind
#   script:
#     - export SAST_VERSION=${SP_VERSION:-$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')}
#     - |
#       if ! docker info &>/dev/null; then
#         if [ -z "$DOCKER_HOST" -a "$KUBERNETES_PORT" ]; then
#           export DOCKER_HOST='tcp://localhost:2375'
#         fi
#       fi
#     - |
#       ENVS=`printenv | grep -vE '^(DOCKER_|CI|GITLAB_|FF_|HOME|PWD|OLDPWD|PATH|SHLVL|HOSTNAME)' | sed -e 's/\=/\=\"/p' | sed '/^$/d' | sed 's/^/--env /g' | sed 's/$/\"/g'| sort | uniq  | tr '\n' ' '`
#       docker run --env SAST_CONFIDENCE_LEVEL="${SAST_CONFIDENCE_LEVEL:-3}" \
#                  --env SAST_DEFAULT_ANALYZERS="${SAST_DEFAULT_ANALYZERS}" \
#                  --env SAST_ANALYZER_IMAGE_PREFIX="${SAST_ANALYZER_IMAGE_PREFIX}" \
#                  --env SAST_ANALYZER_IMAGE_TAG="${SAST_ANALYZER_IMAGE_TAG}" \
#                  --env SCAN_KUBERNETES_MANIFESTS="${SCAN_KUBERNETES_MANIFESTS}" \
#                  --env SAST_DISABLE_DIND="${SAST_DISABLE_DIND}" \
#                  --env GOPATH="${GOPATH}" \
#                  --env GOBIN="${GOBIN}" \
#         --volume "$PWD:/code" \
#         --volume /var/run/docker.sock:/var/run/docker.sock \
#         "registry.gitlab.com/gitlab-org/security-products/sast:$SAST_VERSION" /app/bin/run /code

#   except:
#     variables:
#       - $SAST_DISABLED
#       - $SAST_DISABLE_DIND == 'true'

# .sast-analyzer:
#   extends: sast
#   services: []
#   except:
#     variables:
#       - $SAST_DISABLED
#       - $SAST_DISABLE_DIND == 'false'
#   script:
#     - /analyzer run


kubesec-sast:
  variables:
    KUBESEC_HELM_CHARTS_PATH: $CI_PROJECT_DIR/charts/dask-operator
  before_script:
    - |
      echo "##### KUBESEC_HELM_CHARTS_PATH #####"
    - ls -latr ${KUBESEC_HELM_CHARTS_PATH}
  script:
    - /analyzer analyze --helm-charts-path ${KUBESEC_HELM_CHARTS_PATH}
  artifacts:
    reports:
      sast: gl-sast-report.json

# kubesec-sast:
#   extends: .sast-analyzer
#   image:
#     name: "$SAST_ANALYZER_IMAGE_PREFIX/kubesec:$SAST_ANALYZER_IMAGE_TAG"
#   only:
#     variables:
#       - $GITLAB_FEATURES =~ /\bsast\b/ &&
#           $SAST_DEFAULT_ANALYZERS =~ /kubesec/ &&
#           $SCAN_KUBERNETES_MANIFESTS == 'true'

# gosec-sast:
#   extends: .sast-analyzer
#   image:
#     name: "$SAST_ANALYZER_IMAGE_PREFIX/gosec:$SAST_ANALYZER_IMAGE_TAG"
#   only:
#     variables:
#       - $GITLAB_FEATURES =~ /\bsast\b/ &&
#           $SAST_DEFAULT_ANALYZERS =~ /gosec/ &&
#           $CI_PROJECT_REPOSITORY_LANGUAGES =~ /\bgo\b/

# secrets-sast:
#   extends: .sast-analyzer
#   image:
#     name: "$SAST_ANALYZER_IMAGE_PREFIX/secrets:$SAST_ANALYZER_IMAGE_TAG"
#   only:
#     variables:
#       - $GITLAB_FEATURES =~ /\bsast\b/ &&
#           $SAST_DEFAULT_ANALYZERS =~ /secrets/

.build_env: &buid_env
  before_script:
    - |
      echo "Starting directory (buid_env) is: $(pwd)"
      export GOPATH=${CI_PROJECT_DIR}/.cache
      export GO111MODULE=on
    - env

fmt:
  <<: *buid_env
  stage: check
  script:
    - make fmt

vet:
  <<: *buid_env
  stage: check
  script:
    - make vet

compile:
  <<: *buid_env
  stage: compile
  script:
    - make manager
    # - go build -race -ldflags "-extldflags '-static'" -o $CI_PROJECT_DIR/mybinary
  artifacts:
    paths:
      - bin/manager
    expire_in: 1 weeks

test:
  <<: *buid_env
  stage: test
  script:
    - curl -L https://github.com/kubernetes-sigs/kubebuilder/releases/download/v2.3.1/kubebuilder_2.3.1_linux_amd64.tar.gz >/tmp/kubebuilder.tar.gz
    - tar -zxvf /tmp/kubebuilder.tar.gz
    - test -d /usr/local/kubebuilder || mv kubebuilder_2.3.1_linux_amd64 /usr/local/kubebuilder
    - export PATH=$PATH:/usr/local/kubebuilder/bin
    - make test
  artifacts:
    paths:
      - cover
    expire_in: 4 weeks

build-image:
  stage: build
  # Official docker image.
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  # image: docker:latest
  # services:
  #   - docker:dind
  before_script:
    # - echo -n "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    # - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - export IMG="$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA" # was "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
    # - docker pull $CI_REGISTRY_IMAGE:latest || true
    # - docker build --pull --cache-from $CI_REGISTRY_IMAGE:latest --tag "$IMG" .
    # - docker push "$IMG"
    - export IMAGE_TAG="$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA"
    # - docker tag "$IMG" "$IMAGE_TAG"
    # - docker push "$IMAGE_TAG"
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination "$IMG" --destination "$IMAGE_TAG"
    - echo "$CI_COMMIT_SHORT_SHA (latest)" > current_tag.txt
  artifacts:
    paths:
        - current_tag.txt
  only:
    refs:
      - master

tag-push-latest:
  stage: push
  # Official docker image.
  image: docker:latest
  variables:
    # We do not need GitLab to clone the source code.
    GIT_STRATEGY: none
  services:
    - docker:dind
  before_script:
    - echo -n "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
    - export IMG="$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA" # was "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
    - docker pull "$IMG"
    - docker tag "$IMG" "$CI_REGISTRY_IMAGE:latest"
    - docker push "$CI_REGISTRY_IMAGE:latest"
  # when: manual
  only:
    refs:
      - master

push-tag:
  stage: push
  variables:
    GIT_STRATEGY: none
  only:
    # We want this job to be run on tags only.
    - tags
  services:
    - docker:dind
  before_script:
    - echo -n "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
    - export IMG="$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA"
    - export TAGIMG="$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME"
    - docker pull $IMG
    - docker tag $IMG $TAGIMG
    - docker push $TAGIMG

badges:
  stage: badges
  image: python:3
  tags:
    - docker
  script:
    - echo "Python other dependencies installation"
  after_script:
    - ls -latr
    - pip install anybadge
    - commits=$(git rev-list --all --count)
    - anybadge -l commits -v $commits -f commits.svg -c green
    - coverage=$(cat cover/total.txt)
    - anybadge --value=$coverage --file=coverage.svg coverage
    - current_tag=$(cat current_tag.txt)
    - anybadge --value="$current_tag" --label ImageTag --file=current_tag.svg --color=teal
  artifacts:
    paths:
      - commits.svg
      - coverage.svg
      - current_tag.svg
    when: on_success
    expire_in: 30 days
  dependencies:
    - test
    - build-image
  only:
    refs:
      - master

pages:
  stage: pages
  image: busybox:latest
  variables:
    GIT_STRATEGY: none
  script:
    - echo "No other dependencies installation"
  after_script:
   - ls -la
   - mkdir .public
   - touch .public/index.html
   - cp cover/cover.html .public || true
   - cp -r commits.svg coverage.svg current_tag.svg .public || true
   - mv .public public
  only:
    refs:
      - master
  artifacts:
    paths:
      - public
    expire_in: 52 weeks
  dependencies:
    - badges
  tags:
    - docker
